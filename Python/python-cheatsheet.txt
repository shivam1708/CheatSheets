Python is completely object oriented. We do not need to declare variables before using them, or declare their type. Every variable in Python is an object.
TEXT DATA:
message='hello'
print(message)
print(message.lower()) print(message.upper()) print(len(message))
print(message[1:4]) //slices
print(message.count('hello')) //counts how many times the string appears
print(message.find('hello')) //prints index of where the string appears
message=message.replace('hello','hi')
message=''' hi
there''' // to span across multiple lines use quotes 3 times at start and end.

String concatenation: using + operator

String formatting:
greeting='hello'
message='{} world'.format(greeting)
print(message)

or can use fstrings
message=f'{greeting} world'
print(message)

print(dir(message)) //lists all methods available
print(help(str))

INTEGERS and FLOATS:
print(type(message))
Arithmetic operators
+, -, *, %, **->exponent
/ ->division //->floor div 3//2 ->1 3/2->1.5
==,!=,>,<,>=,<= comparison operators
Type casting
num1='10'
num2=int(num1)

LISTS TUPLES AND SETS
Lists:
courses=['a','b','c'] print(courses[0]) //prints first element
print(courses[-1]) //prints last ele , can use negative indexes on lists.
can also using slicing on lists.
courses.append('d')
courses.insert(0,'f') //first param is index and then value

Can use extend when we want to add multiple values to our list.
courses=['a','b','c']
courses2=['a','d']
courses.append(courses2)
print(courses) //['a', 'b', 'c', ['a', 'd']]

but with extend:
courses=['a','b','c']
courses2=['a','d']
courses.extend(courses2)
print(courses) //['a', 'b', 'c', 'a', 'd']

To remove elements:
courses.remove('a') // to remove the first occuring a
courses.pop() //removes last ele

To reverse the list: courses.reverse()
To sort the list: courses.sort() //ascending
courses.sort(reverse=True) //descending
Both these sort the original list

so to keep the original list as it is:
new=sorted(courses) //use the sorted function instead of methods on 'objs'

num=[1,2,3,4,5]
print(min(num)) // 1
print(max(num)) // 5
print(sum(num)) // 15

To find index of element in the list: print(courses.index('a'))
To check if a value exists in our list: print('a' in courses) //True


for index,course in enumerate(courses,start=1): //enumerate returns 2 values
print(index,course)

To convert our list into a string:
cstring= ', '.join(courses)
print(cstring)

Can convert a string to a list:
list=cstring.split(', ') //gives list

TUPLES: we cannot modify tuples-immutable

courses=(‘a’,’b’,’c’)
Cannot change values
Can convert lists to tuples and vice versa tuple(), list()

SETS:unordered and have no duplicates
courses={‘a’,’b’,’c’}
print(‘d’ in courses) //false - membership test of sets.

courses={'a','b','c','a'}
courses2={'a','d','e'}
print(courses.intersection(courses2))  //common eles
print(courses.difference(courses2))  // a-b
print(courses.union(courses2)) //union

To create : empty_list=[] OR list() //using list class
empty_tuple=() OR tuple()
empty_set=set()   // cannot use {} because that creates an empty dictionary
All lists,tuples,sets are heterogeneous, can contain values with any datatype.

Dictionaries: key-value pairs,key is the unique identifier.
student={‘name’:’Ashna’,’age’:20,’courses’:[‘a’,’b’]}
print(student[‘name’])
Say we printed a key that does not exist, so it throws some error but we don't want that to happen, so using:
print(student.get(‘name’)) //prints Ashna
print(student.get(‘phone’)) //prints None
Can also give default value
print(student.get(‘phone’,’Not Found’)) //prints Not Found

To insert values add directly: student[‘phone’]=’100’
To update values: student[‘name’]=’ash’ //updates the dictionary

If we want to update multiple values we can use update()
student.update({‘name’:’sakshi’,’age’:15})  //updates the dictionary

To delete a pair: del student[‘age’]
Can use pop keyword student.pop(‘age’)

To print out the number of eles : print(len(student))
print(student.keys())  //all keys
print(student.values())  //all values
print(student.items()) // all key value pairs

for key in student:
	print(key)

for key,value in student.items():
	print(key,value)


